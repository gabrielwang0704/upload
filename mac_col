module mac_col (clk, reset, out, q_in, q_out, i_inst, o_inst);
parameter bw = 8;
parameter bw_psum = 2*bw+4;
parameter pr = 16;
parameter col_id = 0;
output reg signed [bw_psum-1:0] out;
input  signed [pr*bw-1:0] q_in;
output signed [pr*bw-1:0] q_out;
input  clk, reset;
input  [1:0] i_inst;
output [1:0] o_inst;  

reg    [1:0] inst_q1, inst_q2;
reg   signed [pr*bw-1:0] query_q; 
reg   signed [pr*bw-1:0] key_q;

wire  signed [bw_psum-1:0] psum;

assign o_inst = inst_q2;
assign q_out  = query_q;

mac_16in mac_16in_instance (
    .a(query_q), 
    .b(key_q),
    .clk(clk),
    .rst(reset),
    .out(psum)
); 

always @ (posedge clk) begin
  if (reset) begin
    inst_q1 <= 0;
    inst_q2 <= 0;
    out <= 0;
  end
  else begin
    inst_q1 <= i_inst;
    query_q <= q_in;
    
    if (inst_q1[0]) begin
      key_q <= query_q;  
    end
    
    inst_q2 <= inst_q1;
    
    out <= psum;
  end
end
endmodule
