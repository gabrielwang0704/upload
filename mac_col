module mac_col (
    input clk,
    input reset,
    output reg signed [bw_psum-1:0] out,
    input signed [pr*bw-1:0] q_in,
    output reg signed [pr*bw-1:0] q_out,
    input [1:0] i_inst, // Instruction bits: [1]: execute, [0]: load
    output reg [1:0] o_inst
);

parameter bw = 8;
parameter bw_psum = 2*bw+4;
parameter pr = 16;
parameter col_id = 0;

reg load_ready_q;
reg [1:0] inst_q;
reg signed [pr*bw-1:0] query_q;
reg signed [pr*bw-1:0] key_q;
wire signed [bw_psum-1:0] psum;

mac_16in mac_16in_instance (
    .a(query_q),
    .b(key_q),
    .out(psum)
);

always @(posedge clk) begin
    if (reset) begin
        out <= 0;
        q_out <= 0;
        query_q <= 0;
        key_q <= 0;
        load_ready_q <= 1;
        inst_q <= 0;
    end else begin
        if (i_inst[0]) begin // Load operation
            query_q <= q_in;
            key_q <= q_in;
        end
        if (i_inst[1]) begin // Execute operation
            out <= psum; // Update output only on execute
        end
        inst_q <= i_inst; // Update instruction output
        o_inst <= inst_q;
    end
end

endmodule
